@startuml

package "StreamingService" {
    top to bottom direction

    class Movie {
        - title: string
        - genre: string
        - lengthInSeconds: int
        - rating: float
        - releaseDate: Date
        - videoFilePath: string
        + getTitle(): string
        + getGenre(): string
        + getLengthInSeconds(): int
        + getRating(): float
        + getReleaseDate(): Date
        + getVideoFilePath(): string
    }

    class MovieBuilder {
        - title: string
        - genre: string
        - duration: int
        - rating: float
        - releaseDate: Date
        - videoFilePath: string
        + setTitle(title: string): MovieBuilder
        + setGenre(genre: string): MovieBuilder
        + setLengthInSeconds(duration: int): MovieBuilder
        + setRating(rating: float): MovieBuilder
        + setReleaseDate(releaseDate: Date): MovieBuilder
        + setVideoFilePath(videoFilePath: string): MovieBuilder
        + build(): Movie
    }

    class Customer {
        - name: String
        - email: String
        - username: String
        - password: String
        - videoPlayer: VideoPlayer
        + login(): void
        + logout(): void
        + searchMovies(title: string): List<Movie>
        + createAccount(): void
        + deleteAccount(): void
    }

    class CustomerBuilder {
        - name: string
        - email: string
        - username: string
        - password: string
        + setName(name: string): CustomerBuilder
        + setEmail(email: string): CustomerBuilder
        + setUsername(username: string): CustomerBuilder
        + setPassword(password: string): CustomerBuilder
        + build(): Customer
    }

    interface StreamingService {
        + streamMovie(movie: Movie): void
        + fetchAllMovies(): List<Movie>
        + fetchMoviesByTitle(title: string): List<Movie>
        + verifyCredentials(customer: Customer): void
    }

    class MovieService implements StreamingService {
        - movies: List<Movie>
        - customers: List<Customer>
        + streamMovie(movie: Movie): void
        + fetchAllMovies(): List<Movie>
        + fetchMoviesByTitle(title: string): List<Movie>
        + verifyCredentials(customer: Customer): void
        + newCustomer(customer: Customer): void
    }

    class ProxyService implements StreamingService {
        - movieService: MovieService
        - moviesCache: List<Movie>
        - customersCache: List<Customer>
        + streamMovie(movie: Movie): void
        + fetchAllMovies(): List<Movie>
        + fetchMoviesByTitle(title: string): List<Movie>
        + verifyCredentials(customer: Customer): void
    }

    class VideoPlayer {
        - currentMovie: Movie
        + loadMovie(movie: Movie): void
        + setQuality(quality: int): void
        + displaySubtitles(language: string): void
        + play(): void
        + fastForward(): void
        + rewind(): void
        + pause(): void
        + stop(): void
    }

    MovieBuilder ..> Movie : builds
    CustomerBuilder ..> Customer : builds

    MovieService "1" *-- "0...*" Movie
    MovieService "1" *-- "0...*" Customer

    ProxyService "1" o-- "0...*" Movie
    ProxyService "1" o-- "0...*" Customer
    ProxyService "0...*" o-- "1" MovieService

    VideoPlayer "1" o-- "1" Movie : loads
    ProxyService "1" o-- "0...*" VideoPlayer

    Customer "1" o-- "1" VideoPlayer : watches
}
@enduml

